// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String?   @unique
  name      String?
  avatar    String?
  jobTitle  String?
  posts     Post[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  published Boolean         @default(false)
  title     String
  content   String?
  slug      String?         @unique
  votes     Int             @default(0)
  author    User            @relation(fields: [authorId], references: [id])
  authorId  String          @db.ObjectId
  skills    SkillsOnPosts[]
  ais       AIsOnPosts[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  votes     Int      @default(0)

  replies  Comment[] @relation(name: "replies")
  parent   Comment?  @relation(name: "replies", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  parentId String?   @db.ObjectId
}

model Skill {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  published Boolean         @default(false)
  title     String
  avatar    String?
  posts     SkillsOnPosts[]
}

model SkillsOnPosts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AI {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  published Boolean      @default(false)
  title     String
  avatar    String?
  company   String
  website   String
  posts     AIsOnPosts[]
}

model AIsOnPosts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  ai        AI       @relation(fields: [aiId], references: [id])
  aiId      String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
