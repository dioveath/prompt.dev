// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  email           String            @unique
  username        String?
  name            String?
  avatar          String?
  jobTitle        String?
  posts           Post[]
  comments        Comment[]
  votesOnPosts    VotesOnPosts[]
  votesOnComments VotesOnComments[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Post {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  published Boolean         @default(false)
  title     String
  content   String?
  slug      String?         @unique
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String          @db.ObjectId
  skills    SkillsOnPosts[]
  ais       AIsOnPosts[]
  comments  Comment[]
  votes     VotesOnPosts[]
}

model VotesOnPosts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  value     Int      @default(1)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction)
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction)
  postId    String   @db.ObjectId

  replies  Comment[]         @relation(name: "replies")
  parent   Comment?          @relation(name: "replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?           @db.ObjectId
  votes    VotesOnComments[]
}

model VotesOnComments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  value     Int      @default(1)
}

model Skill {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  published Boolean         @default(false)
  title     String
  avatar    String?
  posts     SkillsOnPosts[]
}

model SkillsOnPosts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AI {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  published   Boolean      @default(false)
  title       String
  description String
  avatar      String?
  company     String?
  website     String
  posts       AIsOnPosts[]
  category    AICategory?  @relation(fields: [categoryId], references: [id])
  categoryId  String?      @db.ObjectId
}

model AICategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  ais       AI[]
}

model AIsOnPosts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  ai        AI       @relation(fields: [aiId], references: [id])
  aiId      String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
